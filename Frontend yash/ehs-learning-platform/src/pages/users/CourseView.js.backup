import React, { useState, useEffect, useRef } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import {
  Container,
  Grid,
  Card,
  CardContent,
  Typography,
  Button,
  Box,
  LinearProgress,
  Alert,
  CircularProgress,
  Chip,
  IconButton,
  Tooltip,
  Paper,
  Avatar,
  Divider,
  useTheme,
  useMediaQuery,
  CardActions,
  CardHeader,
  Stepper,
  Step,
  StepLabel,
  StepConnector,
  stepConnectorClasses
} from '@mui/material';
import { alpha, styled } from '@mui/material/styles';
import {
  PlayArrow,
  CheckCircle,
  Assignment,
  School,
  Lock,
  Refresh,
  ArrowBack,
  RateReview as ReviewIcon,
  LocalFireDepartment,
  SecurityUpdateGood,
  Flag,
  Engineering,
  VerifiedUser,
  AutoAwesome,
  Timer,
  EmojiEvents,
  AccessTime,
  DoubleArrow,
  StarBorder,
  Star
} from '@mui/icons-material';
import { courseService, progressService, assessmentService } from '../../services/api';
import CourseProgressView from '../../components/progress/CourseProgressView';
import AssessmentReview from '../../components/assessment/AssessmentReview';

// Custom step connector
const SafetyStepConnector = styled(StepConnector)(({ theme }) => ({
  [`&.${stepConnectorClasses.alternativeLabel}`]: {
    top: 22,
  },
  [`&.${stepConnectorClasses.active}`]: {
    [`& .${stepConnectorClasses.line}`]: {
      backgroundImage: `linear-gradient(95deg, ${theme.palette.primary.main} 0%, ${theme.palette.primary.light} 100%)`,
    },
  },
  [`&.${stepConnectorClasses.completed}`]: {
    [`& .${stepConnectorClasses.line}`]: {
      backgroundImage: `linear-gradient(95deg, ${theme.palette.success.main} 0%, ${theme.palette.success.light} 100%)`,
    },
  },
  [`& .${stepConnectorClasses.line}`]: {
    height: 3,
    border: 0,
    backgroundColor: theme.palette.mode === 'dark' ? theme.palette.grey[800] : '#eaeaf0',
    borderRadius: 1,
  },
}));

const CourseView = () => {
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('sm'));
  const { courseId } = useParams();
  const navigate = useNavigate();
  const headerRef = useRef(null);
  const [course, setCourse] = useState(null);
  const [courseProgress, setCourseProgress] = useState(null);
  const [componentProgress, setComponentProgress] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [enrolling, setEnrolling] = useState(false);
  const [justEnrolled, setJustEnrolled] = useState(false);
  const [reviewDialogOpen, setReviewDialogOpen] = useState(false);
  const [currentReviewComponent, setCurrentReviewComponent] = useState(null);
  const [assessmentResult, setAssessmentResult] = useState(null);
  const [loadingReview, setLoadingReview] = useState(false);
  const [activeStep, setActiveStep] = useState(0);
  const [isHeaderSticky, setIsHeaderSticky] = useState(false);

  useEffect(() => {
    loadCourseData();

    // Add scroll listener for sticky header
    const handleScroll = () => {
      if (headerRef.current) {
        setIsHeaderSticky(window.scrollY > headerRef.current.offsetTop);
      }
    };

    window.addEventListener('scroll', handleScroll);
    return () => window.removeEventListener('scroll', handleScroll);
  }, [courseId]);

  useEffect(() => {
    // Find the active component based on progress
    if (componentProgress.length > 0) {
      const inProgressComponents = componentProgress.filter(c => c.status === 'IN_PROGRESS');
      if (inProgressComponents.length > 0) {
        // Find the earliest in progress component
        const firstInProgress = inProgressComponents.sort((a, b) => a.order - b.order)[0];
        const index = componentProgress.findIndex(c => c.componentId === firstInProgress.componentId);
        if (index !== -1) {
          setActiveStep(index);
        }
      } else {
        // Find the first not started component
        const notStartedComponents = componentProgress.filter(c => c.status === 'NOT_STARTED');
        if (notStartedComponents.length > 0) {
          const firstNotStarted = notStartedComponents.sort((a, b) => a.order - b.order)[0];
          const index = componentProgress.findIndex(c => c.componentId === firstNotStarted.componentId);
          if (index !== -1) {
            setActiveStep(index);
          }
        } else {
          // All components completed, set to last one
          setActiveStep(componentProgress.length - 1);
        }
      }
    }
  }, [componentProgress]);

  const loadCourseData = async () => {
    try {
      setLoading(true);
      // Get course details
      const courseResponse = await courseService.getUserCourseById(courseId);
      setCourse(courseResponse.data);

      // Get progress data
      try {
        const progressResponse = await progressService.getCourseProgress(courseId);
        setCourseProgress(progressResponse.data.courseProgress);

        // Map component progress with course components
        const progressMap = {};
        progressResponse.data.componentProgresses.forEach(cp => {
          progressMap[cp.componentId] = cp;
        });

        // Create component progress array with all course components
        const mappedProgress = courseResponse.data.components.map(component => {
          const progress = progressMap[component.id] || {
            status: 'NOT_STARTED',
            progressPercentage: 0,
            score: null,
            attempts: 0,
            timeSpentSeconds: 0
          };

          // Ensure componentTitle is included from either progress or component
          const componentTitle = progress.componentTitle || component.data?.title || component.type;

          return {
            id: component.id,
            componentId: component.id,
            componentType: component.type,
            componentTitle: componentTitle,
            order: component.order,
            ...progress,
            componentTitle: componentTitle // Ensure the title is not overwritten by spread operator
          };
        }).sort((a, b) => a.order - b.order);

        setComponentProgress(mappedProgress);
      } catch (progressErr) {
        // Not enrolled yet, show components without progress
        if (progressErr.response?.status === 404) {
          const defaultProgress = courseResponse.data.components.map(component => ({
            id: component.id,
            componentId: component.id,
            componentType: component.type,
            componentTitle: component.data?.title || component.type,
            order: component.order,
            status: 'NOT_STARTED',
            progressPercentage: 0,
            score: null,
            attempts: 0,
            timeSpentSeconds: 0
          })).sort((a, b) => a.order - b.order);

          setComponentProgress(defaultProgress);
        } else {
          throw progressErr;
        }
      }
    } catch (err) {
      setError(err.response?.data?.message || 'Failed to load course');
    } finally {
      setLoading(false);
    }
  };

  const handleEnroll = async () => {
    try {
      setEnrolling(true);
      await progressService.enrollInCourse(courseId);
      // Add a small delay to ensure enrollment is fully processed
      await new Promise(resolve => setTimeout(resolve, 1000));
      setJustEnrolled(true);
      await loadCourseData();
      // Clear the justEnrolled flag after a delay
      setTimeout(() => setJustEnrolled(false), 3000);
    } catch (err) {
      setError(err.response?.data?.message || 'Failed to enroll');
    } finally {
      setEnrolling(false);
    }
  };

  const handleStartComponent = async (componentId, componentType) => {
    // Navigate based on component type
    switch (componentType) {
      case 'PRE_ASSESSMENT':
      case 'POST_ASSESSMENT':
        navigate(`/course/${courseId}/assessment/${componentId}`);
        break;
      case 'MATERIAL':
        navigate(`/course/${courseId}/material/${componentId}`);
        break;
      default:
        console.error('Unknown component type:', componentType);
    }
  };

  // Function to handle the review button click
  const handleReviewComponent = async (componentId, componentType, componentProgress) => {
    try {
      console.log('Review button clicked for component:', componentId, 'type:', componentType);

      // Prevent multiple clicks
      if (loadingReview) {
        console.log('Already loading, ignoring click');
        return;
      }

      setLoadingReview(true);

      // Find the component in the course
      const componentData = course.components.find(c => c.id === componentId);
      if (!componentData) {
        console.error('Component not found in course data');
        throw new Error('Component not found');
      }

      console.log('Found component data:', componentData);

      // First show the dialog with the component data, we'll load the attempt data asynchronously
      setCurrentReviewComponent(componentData);
      setReviewDialogOpen(true);

      // Only handle assessment reviews for now
      if (componentType === 'PRE_ASSESSMENT' || componentType === 'POST_ASSESSMENT') {
        // Create a mock assessment result with basic info in case we can't load detailed data
        const mockResult = {
          score: componentProgress.score || 100,
          passed: true,
          correctAnswers: 'N/A',
          totalQuestions: 'N/A',
          detailedResults: []
        };

        // Set the mock result first, then try to load the real data
        setAssessmentResult(mockResult);

        console.log('Fetching latest attempt for assessment component');
        try {
          // Fetch the latest assessment attempt for this component
          const response = await assessmentService.getLatestAttempt(componentId);
          console.log('Latest attempt response:', response);

          if (response && response.data) {
            console.log('Setting assessment result from latest attempt:', response.data);
            setAssessmentResult(response.data);
          } else {
            console.warn('No data found in latest attempt response, trying all attempts');
            throw new Error('No data in latest attempt');
          }
        } catch (apiError) {
          console.error('API error getting latest attempt:', apiError);
          // Try getting all attempts as fallback
          try {
            console.log('Trying to get all attempts as fallback');
            const attemptsResponse = await assessmentService.getUserAttempts(componentId);
            console.log('All attempts response:', attemptsResponse);

            if (attemptsResponse && attemptsResponse.data && attemptsResponse.data.length > 0) {
              // Get the most recent attempt
              const latestAttempt = attemptsResponse.data.sort((a, b) =>
                new Date(b.submittedAt || b.createdAt) - new Date(a.submittedAt || a.createdAt)
              )[0];

              console.log('Using latest attempt from list:', latestAttempt);

              // If we got an attempt ID but no detailed results, try to fetch the specific attempt
              if (latestAttempt.id && (!latestAttempt.detailedResults || latestAttempt.detailedResults.length === 0)) {
                try {
                  console.log('Attempt found but no detailed results, fetching specific attempt:', latestAttempt.id);
                  const attemptResponse = await assessmentService.getAttempt(latestAttempt.id);

                  if (attemptResponse && attemptResponse.data) {
                    console.log('Got detailed attempt data:', attemptResponse.data);
                    setAssessmentResult(attemptResponse.data);
                  } else {
                    console.warn('No detailed data in specific attempt response, using basic attempt data');
                    setAssessmentResult(latestAttempt);
                  }
                } catch (attemptError) {
                  console.error('Error fetching specific attempt:', attemptError);
                  setAssessmentResult(latestAttempt);
                }
              } else {
                setAssessmentResult(latestAttempt);
              }
            } else {
              console.warn('No assessment attempts found in the fallback request');
              // Keep using the mock result
            }
          } catch (fallbackError) {
            console.error('Fallback attempt also failed:', fallbackError);
            // Keep using the mock result
          }
        }
      } else if (componentType === 'MATERIAL') {
        // For materials, just navigate to the material view
        console.log('Navigating to material view');
        setReviewDialogOpen(false); // Close dialog before navigating
        navigate(`/course/${courseId}/material/${componentId}`);
      }
    } catch (err) {
      const errorMessage = err.response?.data?.message || 'Failed to load review data';
      console.error('Error in handleReviewComponent:', errorMessage, err);
      setError(errorMessage);

      // Keep the dialog open with error state instead of showing an alert
      if (!reviewDialogOpen) {
        setReviewDialogOpen(true);
      }

      // Create error result to display in the dialog
      setAssessmentResult({
        error: true,
        errorMessage: errorMessage
      });
    } finally {
      setLoadingReview(false);
    }
  };

  // Get appropriate icon based on component type
  const getComponentIcon = (type, domainName) => {
    // Basic mapping based on type
    switch (type) {
      case 'PRE_ASSESSMENT':
      case 'POST_ASSESSMENT':
        return <Assignment />;
      case 'MATERIAL':
        return <School />;
      default:
        return <PlayArrow />;
    }
  };

  // Get appropriate color based on domain
  const getDomainColor = (domainName) => {
    if (!domainName) return theme.palette.primary.main;

    const domain = domainName.toLowerCase();

    if (domain.includes('fire')) {
      return theme.palette.error.main;
    }
    if (domain.includes('safety')) {
      return theme.palette.success.main;
    }
    if (domain.includes('health')) {
      return theme.palette.info.main;
    }

    return theme.palette.primary.main;
  };

  const getStatusChip = (status) => {
    switch (status) {
      case 'COMPLETED':
        return <Chip icon={<CheckCircle />} label="Completed" color="success" size="small" />;
      case 'IN_PROGRESS':
        return <Chip label="In Progress" color="primary" size="small" />;
      case 'FAILED':
        return <Chip label="Failed" color="error" size="small" />;
      default:
        return <Chip label="Not Started" size="small" />;
    }
  };

  // Format time for display
  const formatTime = (seconds) => {
    if (!seconds) return '0m';
    const hours = Math.floor(seconds / 3600);
    const minutes = Math.floor((seconds % 3600) / 60);
    return hours > 0 ? `${hours}h ${minutes}m` : `${minutes}m`;
  };

  // Get course banner pattern based on domain
  const getCourseBannerPattern = () => {
    if (!course?.domain?.name) {
      return `linear-gradient(135deg, ${alpha(theme.palette.primary.dark, 0.9)} 0%, ${alpha(theme.palette.primary.main, 0.8)} 100%)`;
    }

    const domain = course.domain.name.toLowerCase();

    if (domain.includes('fire')) {
      return `linear-gradient(135deg, ${alpha(theme.palette.error.dark, 0.9)} 0%, ${alpha(theme.palette.error.main, 0.8)} 100%)`;
    }
    if (domain.includes('safety')) {
      return `linear-gradient(135deg, ${alpha(theme.palette.success.dark, 0.9)} 0%, ${alpha(theme.palette.success.main, 0.8)} 100%)`;
    }
    if (domain.includes('health')) {
      return `linear-gradient(135deg, ${alpha(theme.palette.info.dark, 0.9)} 0%, ${alpha(theme.palette.info.main, 0.8)} 100%)`;
    }

    return `linear-gradient(135deg, ${alpha(theme.palette.primary.dark, 0.9)} 0%, ${alpha(theme.palette.primary.main, 0.8)} 100%)`;
  };

  // Get banner icon based on domain
  const getBannerIcon = () => {
    if (!course?.domain?.name) return <VerifiedUser sx={{ fontSize: 40 }} />;

    const domain = course.domain.name.toLowerCase();

    if (domain.includes('fire')) {
      return <LocalFireDepartment sx={{ fontSize: 40 }} />;
    }
    if (domain.includes('safety')) {
      return <SecurityUpdateGood sx={{ fontSize: 40 }} />;
    }
    if (domain.includes('health')) {
      return <VerifiedUser sx={{ fontSize: 40 }} />;
    }

    return <VerifiedUser sx={{ fontSize: 40 }} />;
  };

  const renderComponentCard = (component, index) => {
    // Find matching progress if enrolled
    let comp = {
      componentId: component.id,
      componentType: component.type,
      componentTitle: component.data?.title || component.type,
      status: 'NOT_STARTED',
      progressPercentage: 0,
      score: null,
      attempts: 0,
      timeSpentSeconds: 0
    };

    const isEnrolled = courseProgress !== null;

    if (isEnrolled && componentProgress.length > 0) {
      const found = componentProgress.find(cp => cp.componentId === component.id);
      if (found) {
        comp = { ...comp, ...found };
      }
    }

    // Check if this component is locked
    let isLocked = false;
    if (isEnrolled && index > 0 && comp.status === 'NOT_STARTED') {
      // Check if previous component is completed
      const prevComponent = componentProgress[index - 1];
      isLocked = !prevComponent || prevComponent.status !== 'COMPLETED';
    }

    // Always allow first component or if already started/completed
    const canStart = index === 0 || !isLocked || comp.status !== 'NOT_STARTED';

    // Get appropriate background color based on status and type
    const getCardBackground = () => {
      if (comp.status === 'COMPLETED') return alpha(theme.palette.success.main, 0.05);
      if (comp.status === 'IN_PROGRESS') return alpha(theme.palette.primary.main, 0.05);
      if (comp.status === 'FAILED') return alpha(theme.palette.error.main, 0.05);
      return 'white';
    };

    return (
      <Grid item xs={12} sm={6} md={4} key={component.id}>
        <Card
          sx={{
            height: '100%',
            display: 'flex',
            flexDirection: 'column',
            overflow: 'hidden',
            borderRadius: 2,
            backgroundColor: getCardBackground(),
            position: 'relative',
            transition: 'transform 0.2s ease-in-out, box-shadow 0.2s ease-in-out',
            boxShadow: isLocked ? 'none' : '0 2px 6px rgba(0,0,0,0.1)',
            opacity: isLocked ? 0.7 : 1,
            '&:hover': {
              transform: isLocked ? 'none' : 'translateY(-5px)',
              boxShadow: isLocked ? 'none' : '0 6px 12px rgba(0,0,0,0.15)'
            }
          }}
        >
          {isLocked && (
            <Box
              sx={{
                position: 'absolute',
                top: 0,
                left: 0,
                right: 0,
                bottom: 0,
                backgroundColor: 'rgba(0,0,0,0.03)',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                zIndex: 1,
                flexDirection: 'column'
              }}
            >
              <Lock sx={{ fontSize: 32, color: 'text.disabled', mb: 1 }} />
              <Typography variant="body2" color="text.disabled">
                Complete previous component first
              </Typography>
            </Box>
          )}

          <CardHeader
            avatar={
              <Avatar
                sx={{
                  bgcolor: comp.status === 'COMPLETED'
                    ? theme.palette.success.main
                    : comp.status === 'IN_PROGRESS'
                      ? theme.palette.primary.main
                      : theme.palette.grey[300]
                }}
              >
                {getComponentIcon(component.type, course?.domain?.name)}
              </Avatar>
            }
            title={
              <Typography variant="subtitle1" component="div" fontWeight={500}>
                {comp.componentTitle}
              </Typography>
            }
            subheader={
              <Box sx={{ display: 'flex', alignItems: 'center', mt: 0.5 }}>
                <Typography variant="caption" sx={{ mr: 1 }}>
                  {component.type.replace('_', ' ')}
                </Typography>
                {isEnrolled && getStatusChip(comp.status)}
              </Box>
            }
          />

          <CardContent sx={{ pt: 0, flexGrow: 1 }}>
            {isEnrolled && (
              <Box sx={{ mt: 1 }}>
                {comp.score !== null && (
                  <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>
                    <EmojiEvents fontSize="small" sx={{ color: 'text.secondary', mr: 1 }} />
                    <Typography variant="body2">
                      Score: {comp.score}%
                    </Typography>
                  </Box>
                )}

                {comp.attempts > 0 && (
                  <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>
                    <Refresh fontSize="small" sx={{ color: 'text.secondary', mr: 1 }} />
                    <Typography variant="body2">
                      Attempts: {comp.attempts}
                    </Typography>
                  </Box>
                )}

                {comp.timeSpentSeconds > 0 && (
                  <Box sx={{ display: 'flex', alignItems: 'center', mb: 1 }}>
                    <AccessTime fontSize="small" sx={{ color: 'text.secondary', mr: 1 }} />
                    <Typography variant="body2">
                      Time: {formatTime(comp.timeSpentSeconds)}
                    </Typography>
                  </Box>
                )}

                {comp.progressPercentage > 0 && comp.progressPercentage < 100 && (
                  <Box sx={{ mt: 2 }}>
                    <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 0.5 }}>
                      <Typography variant="caption" color="text.secondary">Progress</Typography>
                      <Typography variant="caption" fontWeight="bold">{Math.round(comp.progressPercentage)}%</Typography>
                    </Box>
                    <LinearProgress
                      variant="determinate"
                      value={comp.progressPercentage}
                      sx={{ height: 4, borderRadius: 2 }}
                    />
                  </Box>
                )}
              </Box>
            )}
          </CardContent>

          <CardActions sx={{ p: 2 }}>
            {isEnrolled ? (
              canStart ? (
                comp.status === 'COMPLETED' ? (
                  <Button
                    variant="outlined"
                    color="success"
                    startIcon={<ReviewIcon />}
                    onClick={(e) => {
                      e.preventDefault();
                      e.stopPropagation();
                      setCurrentReviewComponent(component);
                      setTimeout(() => {
                        handleReviewComponent(component.id, component.type, comp);
                      }, 0);
                    }}
                    fullWidth
                    disabled={loadingReview}
                    sx={{ borderRadius: 6 }}
                  >
                    {loadingReview ? 'Loading...' : 'Review'}
                  </Button>
                ) : comp.status === 'FAILED' && (component.type === 'PRE_ASSESSMENT' || component.type === 'POST_ASSESSMENT') ? (
                  comp.attempts >= 3 ? (
                    <Button
                      variant="outlined"
                      color="error"
                      fullWidth
                      disabled={true}
                      sx={{ borderRadius: 6 }}
                    >
                      No attempts left
                    </Button>
                  ) : (
                    <Button
                      variant="contained"
                      color="primary"
                      startIcon={<Refresh />}
                      onClick={() => handleStartComponent(component.id, component.type)}
                      fullWidth
                      disabled={justEnrolled}
                      sx={{ borderRadius: 6 }}
                    >
                      Re-attempt ({3 - comp.attempts} left)
                    </Button>
                  )
                ) : (
                  <Button
                    variant="contained"
                    startIcon={comp.status === 'IN_PROGRESS' ? <PlayArrow /> : <DoubleArrow />}
                    onClick={() => handleStartComponent(component.id, component.type)}
                    fullWidth
                    disabled={justEnrolled}
                    sx={{ borderRadius: 6 }}
                  >
                    {justEnrolled ? 'Loading...' :
                     comp.status === 'IN_PROGRESS' ? 'Continue' : 'Start'}
                  </Button>
                )
              ) : (
                <Button variant="outlined" disabled fullWidth sx={{ borderRadius: 6 }}>
                  Locked
                </Button>
              )
            ) : (
              <Button variant="outlined" disabled fullWidth sx={{ borderRadius: 6 }}>
                Enroll to access
              </Button>
            )}
          </CardActions>
        </Card>
      </Grid>
    );
  };

  if (loading) {
    return (
      <Box display="flex" justifyContent="center" alignItems="center" minHeight="400px">
        <CircularProgress />
      </Box>
    );
  }

  if (error) {
    return (
      <Container maxWidth="lg" sx={{ mt: 4 }}>
        <Alert severity="error">{error}</Alert>
        <Button
          variant="contained"
          onClick={() => navigate('/my-courses')}
          sx={{ mt: 2, borderRadius: 6 }}
          startIcon={<ArrowBack />}
        >
          Back to Courses
        </Button>
      </Container>
    );
  }

  const isEnrolled = courseProgress !== null;

  return (
    <>
      {/* Sticky progress bar when enrolled */}
      {isEnrolled && isHeaderSticky && (
        <Box
          sx={{
            position: 'fixed',
            top: 0,
            left: 0,
            right: 0,
            zIndex: 999,
            background: 'white',
            boxShadow: '0 2px 4px rgba(0,0,0,0.1)',
            p: 1,
            display: 'flex',
            alignItems: 'center',
            gap: 2
          }}
        >
          <Box sx={{ flexGrow: 1, maxWidth: 'calc(100% - 200px)' }}>
            <Typography variant="body2" fontWeight="bold" noWrap>
              {course?.title}
            </Typography>
            <Box sx={{ display: 'flex', alignItems: 'center', gap: 1 }}>
              <LinearProgress
                variant="determinate"
                value={courseProgress?.overallProgress || 0}
                sx={{ flexGrow: 1, height: 6, borderRadius: 3 }}
              />
              <Typography variant="body2" fontWeight="bold">
                {Math.round(courseProgress?.overallProgress || 0)}%
              </Typography>
            </Box>
          </Box>
          <Button
            variant="contained"
            size="small"
            startIcon={<ArrowBack />}
            onClick={() => navigate('/my-courses')}
            sx={{ borderRadius: 6 }}
          >
            My Courses
          </Button>
        </Box>
      )}

      {/* Course header banner */}
      <Box
        ref={headerRef}
        sx={{
          background: getCourseBannerPattern(),
          backgroundSize: 'cover',
          color: 'white',
          position: 'relative',
          mb: 4,
          pt: 6,
          pb: 5,
          overflow: 'hidden'
        }}
      >
        {/* Pattern overlay */}
        <Box
          sx={{
            position: 'absolute',
            top: 0,
            left: 0,
            right: 0,
            bottom: 0,
            backgroundColor: 'rgba(0,0,0,0.03)',
            backgroundImage: "url(\"data:image/svg+xml,%3Csvg width='40' height='40' viewBox='0 0 40 40' xmlns='http://www.w3.org/2000/svg'%3E%3Cg fill='%23ffffff' fill-opacity='0.08' fill-rule='evenodd'%3E%3Cpath d='M0 40L40 0H20L0 20M40 40V20L20 40'/%3E%3C/g%3E%3C/svg%3E\")",
            zIndex: 1
          }}
        />

        <Container maxWidth="lg" sx={{ position: 'relative', zIndex: 2 }}>
          <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
            <IconButton
              onClick={() => navigate('/my-courses')}
              sx={{ color: 'white', mr: 2, bgcolor: 'rgba(255,255,255,0.2)' }}
            >
              <ArrowBack />
            </IconButton>

            <Box
              sx={{
                display: 'flex',
                alignItems: 'center',
                gap: 2,
                bgcolor: 'rgba(255,255,255,0.2)',
                borderRadius: 2,
                py: 0.5,
                px: 2
              }}
            >
              {getBannerIcon()}

              <Box>
                <Typography variant="h4" component="h1" fontWeight="bold">
                  {course?.title}
                </Typography>
                <Typography variant="subtitle1">
                  {course?.domain?.name || 'Safety Training'}
                </Typography>
              </Box>
            </Box>
          </Box>

          <Grid container spacing={3} sx={{ mt: 2 }}>
            <Grid item xs={12} md={7}>
              <Paper sx={{ p: 3, bgcolor: 'rgba(255,255,255,0.9)', color: 'text.primary', borderRadius: 2 }}>
                <Typography variant="body1" paragraph>
                  {course?.description}
                </Typography>

                <Box sx={{ display: 'flex', gap: 2, flexWrap: 'wrap' }}>
                  {course?.timeLimit && (
                    <Chip
                      icon={<Timer />}
                      label={`Time Limit: ${course.timeLimit} minutes`}
                      variant="outlined"
                      sx={{ borderRadius: 6 }}
                    />
                  )}

                  {course?.passingScore && (
                    <Chip
                      icon={<Flag />}
                      label={`Passing Score: ${course.passingScore}%`}
                      variant="outlined"
                      sx={{ borderRadius: 6 }}
                    />
                  )}

                  <Chip
                    icon={<School />}
                    label={`${course?.components?.length || 0} Components`}
                    variant="outlined"
                    sx={{ borderRadius: 6 }}
                  />
                </Box>
              </Paper>
            </Grid>

            <Grid item xs={12} md={5}>
              <Paper sx={{ p: 3, bgcolor: 'rgba(255,255,255,0.9)', color: 'text.primary', height: '100%', borderRadius: 2 }}>
                {isEnrolled ? (
                  <Box sx={{ height: '100%', display: 'flex', flexDirection: 'column' }}>
                    <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'flex-start', mb: 2 }}>
                      <Typography variant="h6">
                        Your Progress
                      </Typography>

                      <Box sx={{
                        bgcolor: courseProgress?.overallProgress === 100 ? theme.palette.success.main : theme.palette.primary.main,
                        color: 'white',
                        px: 2,
                        py: 0.5,
                        borderRadius: 10,
                        fontSize: '1.2rem',
                        fontWeight: 'bold'
                      }}>
                        {Math.round(courseProgress?.overallProgress || 0)}%
                      </Box>
                    </Box>

                    <LinearProgress
                      variant="determinate"
                      value={courseProgress?.overallProgress || 0}
                      sx={{
                        height: 12,
                        borderRadius: 6,
                        mb: 2,
                        '& .MuiLinearProgress-bar': {
                          borderRadius: 6,
                          background: courseProgress?.overallProgress === 100
                            ? `linear-gradient(90deg, ${theme.palette.success.main}, ${theme.palette.success.light})`
                            : `linear-gradient(90deg, ${theme.palette.primary.main}, ${theme.palette.primary.light})`
                        }
                      }}
                    />

                    <Box sx={{ display: 'flex', justifyContent: 'space-between', mb: 3 }}>
                      <Typography variant="body2">
                        {courseProgress?.completedComponents || 0} of {course?.components?.length || 0} completed
                      </Typography>

                      {courseProgress?.overallProgress === 100 && (
                        <Box sx={{ display: 'flex', alignItems: 'center' }}>
                          <CheckCircle color="success" sx={{ mr: 0.5, fontSize: '1rem' }} />
                          <Typography variant="body2" color="success.main" fontWeight="bold">
                            Completed
                          </Typography>
                        </Box>
                      )}
                    </Box>

                    {/* Next component to complete */}
                    {courseProgress?.overallProgress < 100 && componentProgress.length > 0 && (
                      <Box sx={{ mt: 'auto' }}>
                        <Divider sx={{ my: 2 }} />
                        <Typography variant="subtitle2" gutterBottom>
                          Continue Your Training
                        </Typography>

                        {(() => {
                          // Find the first non-completed component
                          const nextComponent = componentProgress.find(c => c.status !== 'COMPLETED');
                          if (nextComponent) {
                            const component = course.components.find(c => c.id === nextComponent.componentId);
                            if (component) {
                              return (
                                <Button
                                  variant="contained"
                                  startIcon={<PlayArrow />}
                                  onClick={() => handleStartComponent(component.id, component.type)}
                                  fullWidth
                                  size="large"
                                  sx={{ mt: 1, py: 1.5, borderRadius: 6 }}
                                >
                                  {nextComponent.status === 'IN_PROGRESS' ? 'Continue' : 'Start Next Component'}
                                </Button>
                              );
                            }
                          }
                          return null;
                        })()}
                      </Box>
                    )}
                  </Box>
                ) : (
                  <Box sx={{ display: 'flex', flexDirection: 'column', height: '100%', justifyContent: 'center', alignItems: 'center', py: 3 }}>
                    <AutoAwesome sx={{ fontSize: 48, color: theme.palette.primary.main, mb: 2 }} />

                    <Typography variant="h6" align="center" gutterBottom>
                      Ready to Begin Your Training?
                    </Typography>

                    <Typography variant="body2" align="center" color="text.secondary" paragraph>
                      Enroll in this course to track your progress and earn a certificate upon completion.
                    </Typography>

                    <Button
                      variant="contained"
                      size="large"
                      onClick={handleEnroll}
                      disabled={enrolling}
                      fullWidth
                      sx={{ mt: 2, py: 1.5, borderRadius: 6 }}
                    >
                      {enrolling ? 'Enrolling...' : 'Enroll Now'}
                    </Button>
                  </Box>
                )}
              </Paper>
            </Grid>
          </Grid>
        </Container>
      </Box>

      <Container maxWidth="lg" sx={{ mb: 4 }}>
        {/* Components Section */}
        {course && (
          <Box>
            {/* Course progress timeline (horizontal) */}
            {isEnrolled && !isMobile && componentProgress.length > 0 && (
              <Paper sx={{ p: 3, mb: 4, borderRadius: 2 }}>
                <Typography variant="h6" gutterBottom>
                  Course Journey
                </Typography>

                <Stepper
                  alternativeLabel
                  activeStep={activeStep}
                  connector={<SafetyStepConnector />}
                >
                  {componentProgress.map((comp, index) => (
                    <Step key={comp.componentId} completed={comp.status === 'COMPLETED'}>
                      <StepLabel
                        StepIconComponent={() => (
                          <Avatar
                            sx={{
                              width: 40,
                              height: 40,
                              bgcolor: comp.status === 'COMPLETED'
                                ? theme.palette.success.main
                                : comp.status === 'IN_PROGRESS'
                                  ? theme.palette.primary.main
                                  : 'grey.300',
                              color: 'white'
                            }}
                          >
                            {comp.status === 'COMPLETED' ? (
                              <CheckCircle />
                            ) : (
                              getComponentIcon(comp.componentType)
                            )}
                          </Avatar>
                        )}
                      >
                        <Typography variant="body2" fontWeight={500} sx={{ mt: 1 }}>
                          {comp.componentTitle}
                        </Typography>
                        {getStatusChip(comp.status)}
                      </StepLabel>
                    </Step>
                  ))}
                </Stepper>
              </Paper>
            )}

            {/* Components grid */}
            <Box sx={{ mb: 4 }}>
              <Typography variant="h5" gutterBottom fontWeight="bold" sx={{ mb: 3 }}>
                Course Components
              </Typography>

              {course?.components?.length === 0 ? (
                <Paper sx={{ p: 4, textAlign: 'center', borderRadius: 2 }}>
                  <Typography variant="body1">No components available for this course</Typography>
                </Paper>
              ) : (
                <Grid container spacing={3}>
                  {course.components.map((component, index) => renderComponentCard(component, index))}
                </Grid>
              )}
            </Box>

            {/* Detailed progress view section */}
            {isEnrolled && (
              <Box sx={{ mt: 6 }}>
                <Typography variant="h5" gutterBottom fontWeight="bold">
                  Detailed Progress
                </Typography>
                <CourseProgressView courseId={courseId} />
              </Box>
            )}
          </Box>
        )}
      </Container>

      {/* Assessment Review Dialog */}
      <AssessmentReview
        open={reviewDialogOpen}
        onClose={() => {
          console.log('Closing review dialog');
          setReviewDialogOpen(false);
          setCurrentReviewComponent(null);
          setAssessmentResult(null);
        }}
        assessmentResult={assessmentResult}
        component={currentReviewComponent}
      />
    </>
  );
};

export default CourseView;